plugins {
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

ext {
	set('springCloudVersion', "2021.0.3")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'junit:junit:4.13.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'


	runtimeOnly 'mysql:mysql-connector-java'


	//qureydsl
	implementation group: 'com.querydsl', name: 'querydsl-jpa', version: '5.0.0'
	implementation group: 'com.querydsl', name: 'querydsl-core', version: '5.0.0'
	implementation group: 'com.querydsl', name: 'querydsl-apt', version: '5.0.0'
	//querydsl JPAAnnotationProcessor 사용 지정
	// java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
	// java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
	annotationProcessor(
			"javax.persistence:javax.persistence-api",
			"javax.annotation:javax.annotation-api",
	)
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-config'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bus-amqp'

	implementation project(path: ":bbl-common")
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
	if (file(querydslDir).exists()) {
		delete(file(querydslDir))
	}
}
clean.doLast {
	delete file(querydslDir)
}